{"version":3,"sources":["components/AddTask.jsx","components/DisplayTask.jsx","views/Main.js","App.js","serviceWorker.js","index.js"],"names":["styles","paper","width","padding","marginLeft","height","backgroundColor","input","marginBottom","margin","button","AddTask","props","useState","taskName","setTaskName","taskDate","setTaskDate","errors","setErrors","className","Paper","elevation","style","length","errorName","onSubmit","e","console","log","preventDefault","axios","post","then","res","data","message","navigate","catch","err","FormControl","variant","InputLabel","OutlinedInput","type","onChange","target","value","Button","color","paper1","display","overflow","paper2","marginTop","DisplayTask","tasks","setTasks","updatedList","setUpdatedList","useEffect","get","error","onClickHandler","task","action","taskList","taskStatus","put","_id","map","i","key","fontWeight","Date","getTime","moment","utc","format","onClick","taskComplete","delete","deleteHandler","to","path","App","Main","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c1666936.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react'\nimport axios from 'axios';\nimport {navigate} from '@reach/router';\nimport {FormControl,Paper,InputLabel,OutlinedInput,Button } from '@material-ui/core';\nimport '../bootstrap.css';\nimport '../style.css';\n\nconst styles = {\n    paper: {\n        width: \"30rem\", padding: \"2rem\",marginLeft:\"23.5rem\",height:\"20rem auto\",backgroundColor:\"lightyellow\"\n    },\n    input: {\n        marginBottom: \"1rem\",margin: \"0.5rem\",width:\"20rem\"\n    },\n    button: {\n        width: \"100%\"\n    },\n\n}\n\nconst AddTask = props =>{\n    const [taskName, setTaskName] = useState(\"\");\n    const [taskDate, setTaskDate] = useState(\"\");\n    const [errors, setErrors] = useState({})\n\n    const onSubmitHandler = e => {\n        console.log(\"Inside onSubmitHandler\")\n        e.preventDefault();\n        axios.post(`http://localhost:8000/api/task/create`,{\n            taskName,\n            taskDate\n        })\n        .then(res => {\n            if(res.data.errors){\n                setErrors({\n                    taskName:res.data.errors.taskName ? res.data.errors.taskName.message :\"\",\n                    taskDate:res.data.errors.taskDate ? res.data.errors.taskDate.message :\"\"\n                })\n            } else{\n                navigate(\"/\")\n            }\n        })\n        .catch(err => console.log(err))\n    }\n\n    return(\n        <div className=\"container-fluid\">\n            <Paper elevation={5} style={styles.paper}>\n                <h4>Add Project</h4>\n            {taskName.length > 0 && taskName.length < 3 || taskName.errorName?\n            <p className=\"red\">Task must be atleast 3 characters long</p>:<p></p>}\n            <p className=\"red\">{errors.taskName}</p>\n            <p className=\"red\">{errors.taskDate}</p>\n            <form onSubmit={onSubmitHandler}>\n\n                <FormControl variant=\"outlined\" style={styles.input}>\n                    <InputLabel>Project</InputLabel>\n                    <OutlinedInput type=\"text\" onChange={e => setTaskName(e.target.value)}/>\n                </FormControl>\n                <FormControl variant=\"outlined\" style={styles.input}>\n                    {/* <InputLabel>Task Date</InputLabel> */}\n                    <OutlinedInput type=\"date\" onChange={e => setTaskDate(e.target.value)}/>\n                    {/* <input placeholder=\"Date\" class=\"textbox-n\" type=\"text\" onfocus=\"(this.type='date')\" onblur=\"(this.type='text')\" id=\"date\" /> */}\n                </FormControl>\n                <FormControl variant=\"outlined\" style={styles.input}>\n                    <Button type=\"submit\" variant=\"contained\" color=\"secondary\">\n                        Submit\n                    </Button>\n                </FormControl>\n            </form>\n            </Paper>\n        </div>\n    )\n//End of File    \n}\n\nexport default AddTask;","import React,{useState,useEffect} from 'react'\nimport axios from 'axios';\nimport {navigate ,Link} from '@reach/router';\nimport {Paper,Button } from '@material-ui/core';\nimport moment from 'moment';\n\nimport '../bootstrap.css';\nimport '../style.css';\n\nconst styles = {\n    paper: {\n        width: \"30rem auto\", padding: \"2rem\",marginLeft:\"1rem\",height:\"20rem auto\",\n        backgroundColor:\"lightyellow\"\n    },\n    paper1:{\n        width: \"20rem\", padding: \"1rem\",marginLeft:\"1rem\",height:\"20rem auto\",backgroundColor:\"lightgreen\"\n        ,display:\"inline-block\",overflow:\"scroll\"\n    },\n    paper2:{\n        width: \"62rem\", padding: \"1rem\",marginLeft:\"1.9rem\",marginBottom:\"1rem\",height:\"3rem \",backgroundColor:\"lightgreen\"\n        ,display:\"block\",marginTop:\"1rem\"\n    },\n    input: {\n        marginBottom: \"1rem\",margin: \"0.5rem\",width:\"20rem\"\n    },\n    button: {\n        width: \"100%\",color:\"white\"\n    },\n\n}\n\nconst DisplayTask = props => {\n    const [tasks, setTasks] = useState([])\n    const [updatedList, setUpdatedList] = useState(false);\n\n    useEffect(() =>{\n        axios.get(\"http://localhost:8000/api/task/\")\n        .then(res => setTasks(res.data))\n        .catch(error=>console.log(error))\n    },[updatedList])\n\n    const onClickHandler = (e,task,action) =>{\n        console.log(\"in on click\")\n        e.preventDefault();\n        const taskList = {...task}\n        taskList.taskStatus = action\n        axios.put(`http://localhost:8000/api/task/${task._id}`, taskList)\n        .then(res => setUpdatedList(!updatedList))\n        .catch(err => console.log(err))\n    }\n\n    const deleteHandler = (e,taskComplete) =>{\n        console.log(\"in delete\")\n        e.preventDefault();\n        axios.delete(`http://localhost:8000/api/task/${taskComplete._id}`)\n        .then(res => setUpdatedList(!updatedList))\n        .catch(err => console.log(err))\n    }\n    return(\n        <div className=\"container-fluid\">\n            <h1>Project Management</h1>\n            <Paper elevation={5} style={styles.paper}>               \n                <Paper elevation={7} style={styles.paper1}>\n                    <div className=\"header\">\n                        <h4>BackLog</h4>\n                    </div>\n                    <div className=\"tabOne\">\n                        {\n                            tasks.map((task,i) =>(                                \n                                <div key={i}>\n                                    {task.taskStatus === \"pending\" ?\n                                        <div className=\"task\">\n                                            <h5 style={{fontWeight:\"bold\"}}> {task.taskName} </h5>\n                                            <p style={{color: new Date(task.taskDate).getTime() - new Date().getTime() < 0 ? 'red' : 'black'}}>\n                                                Due: {moment.utc(task.taskDate).format(\"MM/DD/YYYY\")}</p>\n                                            <Button type=\"submit\" variant=\"contained\" color=\"secondary\" onClick={e=>onClickHandler(e,task,\"active\")}>Start Project</Button>  \n                                        </div>:\"\"\n\n                                    }\n                                </div>\n                            ))\n                        }\n                    </div>\n                    \n                </Paper>\n                <Paper elevation={7} style={styles.paper1}>\n                    <div className=\"header1\">\n                        <h4>In Progress</h4>\n                    </div>\n                    <div className=\"tabOne\">\n                        {\n                            tasks.map((task,i) =>(\n                                <div key={i}>\n                                    {task.taskStatus === \"active\" ?\n                                        <div className=\"task\">\n                                            <h5 style={{fontWeight:\"bold\"}}> {task.taskName} </h5>\n                                            <p style={{color: new Date(task.taskDate).getTime() - new Date().getTime() < 0 ? 'red' : 'black'}}>\n                                                Due: {moment.utc(task.taskDate).format(\"MM/DD/YYYY\")}</p>\n                                            <Button type=\"submit\"  variant=\"contained\" color=\"secondary\" onClick={(e) =>onClickHandler(e,task,\"completed\")}>Completed</Button> \n                                        </div>:\"\"\n                                    }\n                                </div>\n                            ))\n                        }\n                    </div>\n                </Paper>\n                <Paper elevation={7} style={styles.paper1}>\n                    <div className=\"header2\">\n                        <h4>Completed</h4>\n                    </div>\n                    <div className=\"tabOne\">\n                        {\n                            tasks.map((taskComplete,i) =>(\n                                <div key={i}>\n                                    {taskComplete.taskStatus === \"completed\" ?\n                                        <div className=\"task\">\n                                            <h5 style={{fontWeight:\"bold\"}}>  {taskComplete.taskName} </h5>\n                                            <p style={{color: new Date(taskComplete.taskDate).getTime() - new Date().getTime() < 0 ? 'red' : 'black'}}>\n                                                Due: {moment.utc(taskComplete.taskDate).format(\"MM/DD/YYYY\")}</p>\n                                            <Button type=\"submit\" onClick={(e) =>deleteHandler(e,taskComplete)} variant=\"contained\" color=\"secondary\">Remove Task</Button>\n                                        </div>:\"\"\n\n                                    }\n                                </div>\n                            ))\n                        }\n                    </div>\n                </Paper>\n                <Paper elevation={7} style={styles.paper2}>\n                    <h5><Link to=\"/create\"> Add New Project </Link></h5>\n                </Paper>\n            </Paper>\n        </div>\n    )\n//end of file    \n}\n\nexport default DisplayTask;","import React, {useState, useEffect} from 'react';\nimport { Router, Link } from '@reach/router';\nimport AddTask from \"../components/AddTask\";\nimport DisplayTask from \"../components/DisplayTask\";\n\n\nexport default () =>{\n    return(\n        <Router>\n            <AddTask path=\"/create\"/>\n            <DisplayTask path=\"/\" />\n        </Router>\n    )\n\n //End of file   \n}\n\n","import React from 'react';\nimport Main from \"./views/Main\"\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}